{{- if .Values.supavisor.enabled -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "supabase.supavisor.fullname" . }}
  labels:
    {{- include "supabase.supavisor.labels" . | nindent 4 }}
spec:
  {{- if not .Values.supavisor.autoscaling.enabled }}
  replicas: {{ .Values.supavisor.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "supabase.supavisor.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.supavisor.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "supabase.supavisor.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.supavisor.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "supabase.supavisor.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.supavisor.podSecurityContext | nindent 8 }}
      {{- if .Values.db.enabled }}
      initContainers:
        - name: wait-for-db
          image: postgres:15-alpine
          command:
            - sh
            - -c
            - |
              until pg_isready -h {{ include "supabase.db.fullname" . }} -p {{ .Values.db.service.port }} -U postgres; do
                echo "Waiting for database to be ready..."
                sleep 2
              done
              echo "Database is ready!"

              echo "=== DEBUG: Checking database state ==="

              # Check if supabase_admin user exists
              echo "Checking if supabase_admin user exists..."
              PGPASSWORD="example123456" psql -h {{ include "supabase.db.fullname" . }} -p {{ .Values.db.service.port }} -U postgres -d postgres -c "SELECT rolname, rolsuper FROM pg_roles WHERE rolname='supabase_admin';" || echo "Failed to query users"

              # Check if _supabase database exists
              echo "Checking if _supabase database exists..."
              PGPASSWORD="example123456" psql -h {{ include "supabase.db.fullname" . }} -p {{ .Values.db.service.port }} -U postgres -d postgres -c "SELECT datname FROM pg_database WHERE datname='_supabase';" || echo "Failed to query databases"

              # Try to connect as supabase_admin to postgres database first
              echo "Testing supabase_admin connection to postgres database..."
              PGPASSWORD="example123456" psql -h {{ include "supabase.db.fullname" . }} -p {{ .Values.db.service.port }} -U supabase_admin -d postgres -c "SELECT 1;" && echo "SUCCESS: supabase_admin can connect to postgres DB" || echo "FAILED: supabase_admin cannot connect to postgres DB"

              # Try to connect as supabase_admin to _supabase database
              echo "Testing supabase_admin connection to _supabase database..."
              PGPASSWORD="example123456" psql -h {{ include "supabase.db.fullname" . }} -p {{ .Values.db.service.port }} -U supabase_admin -d _supabase -c "SELECT 1;" && echo "SUCCESS: supabase_admin can connect to _supabase DB" || echo "FAILED: supabase_admin cannot connect to _supabase DB"

              echo "=== END DEBUG ==="
          env:
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  {{- if .Values.secret.db.secretRef }}
                  name: {{ .Values.secret.db.secretRef }}
                  key: {{ .Values.secret.db.secretRefKey.password | default "password" }}
                  {{- else }}
                  name: {{ include "supabase.secret.db" . }}
                  key: password
                  {{- end }}
          resources:
            requests:
              memory: "64Mi"
              cpu: "50m"
            limits:
              memory: "128Mi"
              cpu: "100m"
      {{- end }}
      containers:
        - name: {{ include "supabase.supavisor.name" $ }}
          securityContext:
            {{- toYaml .Values.supavisor.securityContext | nindent 12 }}
          image: "{{ .Values.supavisor.image.repository }}:{{ .Values.supavisor.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.supavisor.image.pullPolicy }}
          env:
            {{- range $key, $value := .Values.supavisor.environment }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
            {{- if .Values.db.enabled }}
            - name: POSTGRES_HOSTNAME
              value: {{ include "supabase.db.fullname" . }}
            - name: POSTGRES_PORT
              value: "{{ .Values.db.service.port }}"
            - name: DATABASE_URL
              value: "ecto://supabase_admin:$(POSTGRES_PASSWORD)@$(POSTGRES_HOSTNAME):$(POSTGRES_PORT)/_supabase"
            {{- end }}
            - name: POSTGRES_PASSWORD
              value: "example123456"
            - name: SECRET_KEY_BASE
              valueFrom:
                secretKeyRef:
                  {{- if .Values.secret.jwt.secretRef }}
                  name: {{ .Values.secret.jwt.secretRef }}
                  key: {{ .Values.secret.jwt.secretRefKey.secret | default "secret" }}
                  {{- else }}
                  name: {{ include "supabase.secret.jwt" . }}
                  key: secret
                  {{- end }}
            - name: VAULT_ENC_KEY
              valueFrom:
                secretKeyRef:
                  {{- if .Values.secret.jwt.secretRef }}
                  name: {{ .Values.secret.jwt.secretRef }}
                  key: {{ .Values.secret.jwt.secretRefKey.secret | default "secret" }}
                  {{- else }}
                  name: {{ include "supabase.secret.jwt" . }}
                  key: secret
                  {{- end }}
            - name: API_JWT_SECRET
              valueFrom:
                secretKeyRef:
                  {{- if .Values.secret.jwt.secretRef }}
                  name: {{ .Values.secret.jwt.secretRef }}
                  key: {{ .Values.secret.jwt.secretRefKey.secret | default "secret" }}
                  {{- else }}
                  name: {{ include "supabase.secret.jwt" . }}
                  key: secret
                  {{- end }}
            - name: METRICS_JWT_SECRET
              valueFrom:
                secretKeyRef:
                  {{- if .Values.secret.jwt.secretRef }}
                  name: {{ .Values.secret.jwt.secretRef }}
                  key: {{ .Values.secret.jwt.secretRefKey.secret | default "secret" }}
                  {{- else }}
                  name: {{ include "supabase.secret.jwt" . }}
                  key: secret
                  {{- end }}
          {{- with .Values.supavisor.livenessProbe }}
          livenessProbe:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.supavisor.readinessProbe }}
          readinessProbe:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          ports:
            - name: http
              containerPort: 4000
              protocol: TCP
          {{- with .Values.supavisor.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          command:
            - /bin/sh
            - -c
            - '/app/bin/migrate && /app/bin/supavisor eval "$(cat /etc/pooler/pooler.exs)" && /app/bin/server'
          volumeMounts:
            - name: pooler-config
              mountPath: /etc/pooler
              readOnly: true
          {{- with .Values.supavisor.volumeMounts }}
            {{- toYaml . | nindent 12 }}
          {{- end }}
      volumes:
        - name: pooler-config
          configMap:
            name: {{ include "supabase.supavisor.fullname" . }}-config
      {{- with .Values.supavisor.volumes }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.supavisor.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.supavisor.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.supavisor.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}